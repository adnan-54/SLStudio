<UserControl x:Class="SLStudio.RpkEditor.Modules.ToolBox.Views.RpkToolBoxView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:gong="urn:gong-wpf-dragdrop"
             mc:Ignorable="d" d:DesignHeight="450" d:DesignWidth="800"
             Loaded="{DXEvent 'OnLoaded()'}">
    <xctk:BusyIndicator IsBusy="{Binding IsBusy}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!--InputBindings-->
            <Grid.InputBindings>
                <KeyBinding Key="Oem1" Modifiers="Ctrl" Command="{DXCommand '@e(searchBox).Focus()'}" />
                <!--<KeyBinding Key="S" Modifiers="Alt" Command="{DXCommand 'FocusDesignerSearch()'}" />-->
            </Grid.InputBindings>

            <!--Search-->
            <TextBox x:Name="searchBox" Grid.Row="0" Style="{StaticResource StudioSearchTextBoxStyle}"
                     Text="{Binding SearchTerm, UpdateSourceTrigger=PropertyChanged, Delay=500}"
                     metro:TextBoxHelper.Watermark="Search (Ctrl+;)">
                <!--InputBindings-->
                <TextBox.InputBindings>
                    <KeyBinding Key="Return" Command="{DXCommand 'AddResource()'}" />
                    <KeyBinding Key="Up" Command="{DXCommand 'SelectPrev()'}" />
                    <KeyBinding Key="Down" Command="{DXCommand 'SelectNext()'}" />
                </TextBox.InputBindings>
            </TextBox>

            <!--Items-->
            <ListBox Grid.Row="1" BorderThickness="0"
                     SelectedItem="{Binding SelectedItem}"
                     ItemsSource="{Binding Resources}"
                     FocusVisualStyle="{x:Null}"
                     gong:DragDrop.IsDragSource="True"
                     gong:DragDrop.UseDefaultDragAdorner="True">
                <!--InputBindings-->
                <ListBox.InputBindings>
                    <KeyBinding Key="Return" Command="{DXCommand 'AddResource()'}" />
                    <KeyBinding Key="Space" Command="{DXCommand 'ToggleIsPinned()'}" />
                </ListBox.InputBindings>

                <!--GroupStyle-->
                <ListBox.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type GroupItem}">
                                            <Expander IsExpanded="True">
                                                <Expander.Header>
                                                    <TextBlock Text="{Binding Name}" FontSize="14" FontWeight="Medium" Foreground="{StaticResource Foreground}" />
                                                </Expander.Header>
                                                <ItemsPresenter Margin="{StaticResource LargeLeftMargin}" />
                                            </Expander>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </ListBox.GroupStyle>

                <!--ItemTemplate-->
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Grid Margin="{StaticResource SmallFullMargin}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!--InputBindings-->
                            <Grid.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick" Command="{DXCommand '@a($ListBox).DataContext.AddResource()'}" />
                            </Grid.InputBindings>

                            <!--Icon-->
                            <Image Grid.Column="0" Height="24"
                                   Source="{Binding IconSource, Converter={StaticResource ImageSourceConverter}}" />

                            <!--Name-->
                            <TextBlock Grid.Column="1" Margin="{StaticResource LeftMargin}"
                                       Text="{Binding DisplayName}"
                                       VerticalAlignment="Center" />

                            <!--Pin/Unpin-->
                            <ToggleButton Grid.Column="2" VerticalAlignment="Center"
                                          Command="{DXCommand '@a($ListBox).DataContext.ToggleIsPinned()'}"
                                          IsChecked="{Binding IsPinned, Mode=OneWay}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="Focusable" Value="False" />
                                        <Setter Property="ToolTip" Value="Pin item" />
                                        <Setter Property="Opacity" Value="0.8" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <ContentPresenter x:Name="contentPresenter" Focusable="False" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="ToolTip" Value="Unpin" />
                                            </Trigger>

                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Opacity" Value="1" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>

                                <!--Image-->
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Setter Property="Source" Value="{StaticResource Pushpin}" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                    <Setter Property="Source" Value="{StaticResource PushpinUnpin}" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="False">
                                                    <Setter Property="Visibility" Value="Hidden" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </DataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True" />
                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </ToggleButton>
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>

                <!--ItemStyle-->
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
        </Grid>
    </xctk:BusyIndicator>
</UserControl>