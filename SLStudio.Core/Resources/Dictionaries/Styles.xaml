<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:editor="http://icsharpcode.net/sharpdevelop/avalonedit"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:ae="http://icsharpcode.net/sharpdevelop/avalonedit"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:resx="clr-namespace:SLStudio.Core.Resources.Strings">
    <!--CleanWindowStyle-->
    <Style x:Key="CleanWindowStyle" TargetType="{x:Type metro:MetroWindow}">
        <!--<Setter Property="Icon" Value="Resources/Images/logo.ico" />-->
        <Setter Property="WindowButtonCommands" Value="{DynamicResource DefaultWindowButtons}" />
        <Setter Property="IconTemplate" Value="{DynamicResource WindowIconTemplate}" />
        <Setter Property="WindowTitleBrush" Value="{DynamicResource MahApps.Brushes.SemiTransparentWhite}" />
        <Setter Property="NonActiveWindowTitleBrush" Value="{DynamicResource MahApps.Brushes.TransparentWhite}" />
        <Setter Property="TitleForeground" Value="{DynamicResource MahApps.Brushes.Black}" />
        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Black}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
        <Setter Property="NonActiveBorderBrush" Value="{DynamicResource MahApps.Brushes.Accent2}" />
        <Setter Property="GlowBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
        <Setter Property="NonActiveGlowBrush" Value="{DynamicResource MahApps.Brushes.Accent2}" />
        <Setter Property="SaveWindowPosition" Value="True" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="MinWidth" Value="800" />
        <Setter Property="MinHeight" Value="600" />
        <Setter Property="TitleAlignment" Value="Center" />
        <Setter Property="TitleCharacterCasing" Value="Normal" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}" Value="False">
                <Setter Property="TitleForeground" Value="{DynamicResource MahApps.Brushes.Badged.DisabledBackground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--WindowButtonsStyle-->
    <Style x:Key="WindowButtonsStyle" TargetType="{x:Type metro:WindowButtonCommands}"
           BasedOn="{StaticResource MahApps.Styles.WindowButtonCommands.Win10}">
        <Setter Property="Template" Value="{DynamicResource MahApps.Templates.WindowButtonCommands.Win10}" />
        <Setter Property="LightMinButtonStyle" Value="{DynamicResource WindowButtonsLigthStyle}" />
        <Setter Property="LightMaxButtonStyle" Value="{DynamicResource WindowButtonsLigthStyle}" />
        <Setter Property="LightCloseButtonStyle" Value="{DynamicResource WindowButtonsLigthStyle}" />
        <Setter Property="DarkMinButtonStyle" Value="{DynamicResource WindowButtonsDarkStyle}" />
        <Setter Property="DarkMaxButtonStyle" Value="{DynamicResource WindowButtonsDarkStyle}" />
        <Setter Property="DarkCloseButtonStyle" Value="{DynamicResource WindowButtonsDarkStyle}" />
    </Style>

    <!--WindowButtonsLigthStyle-->
    <Style x:Key="WindowButtonsLigthStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MahApps.Styles.Button.MetroWindow.Light}">
        <Setter Property="Foreground" Value="{Binding TitleForeground, RelativeSource={RelativeSource AncestorType=metro:MetroWindow}}" />
    </Style>

    <!--WindowButtonsDarkStyle-->
    <Style x:Key="WindowButtonsDarkStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MahApps.Styles.Button.MetroWindow.Dark}">
        <Setter Property="Foreground" Value="{Binding TitleForeground, RelativeSource={RelativeSource AncestorType=metro:MetroWindow}}" />
    </Style>

    <!--AvalonEditStyle-->
    <Style TargetType="{x:Type ae:TextEditor}">
        <Setter Property="SyntaxHighlighting" Value="XML" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="ShowLineNumbers" Value="True" />
        <Setter Property="LineNumbersForeground" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
        <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Window.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Black}" />
    </Style>

    <!--AvalonEditSearchBoxStyle-->
    <Style TargetType="{x:Type editor:SearchPanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type editor:SearchPanel}">
                    <Border BorderThickness="1, 1, 1, 4"  Cursor="Arrow" Padding="6"
                            HorizontalAlignment="Right" VerticalAlignment="Top"
                            BorderBrush="{DynamicResource MahApps.Brushes.AccentBase}"
                            Background="{DynamicResource MahApps.Brushes.Window.Background}">
                        <!--Content-->
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!--SearchBox-->
                            <TextBox Name="PART_searchTextBox" Grid.Row="0"
                                     VerticalContentAlignment="Center"
                                     Width="200"
                                     metro:TextBoxHelper.Watermark="{x:Static resx:StudioResources.Search}"
                                     metro:TextBoxHelper.ButtonCommand="editor:SearchCommands.FindNext"
                                     BorderBrush="{DynamicResource MahApps.Brushes.Accent2}"
                                     metro:TextBoxHelper.SelectAllOnFocus="True">
                                <TextBox.Text>
                                    <Binding Path="SearchPattern"
                                             RelativeSource="{RelativeSource TemplatedParent}"
                                             UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ExceptionValidationRule />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MahApps.Styles.TextBox.Search}">
                                        <Setter Property="metro:ControlsHelper.FocusBorderBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
                                        <Setter Property="metro:ControlsHelper.MouseOverBorderBrush" Value="{DynamicResource MahApps.Brushes.Accent2}" />
                                    </Style>
                                </TextBox.Style>
                            </TextBox>

                            <StackPanel Grid.Row="1" HorizontalAlignment="Center"
                                        Orientation="Horizontal"
                                        Margin="{DynamicResource SmallUpMargin}">

                                <!-- FindPrevious-->
                                <Button Margin="{DynamicResource SmallLeftMargin}"
                                        Command="editor:SearchCommands.FindPrevious"
                                        ToolTip="{x:Static resx:StudioResources.FindPrevious}" Height="24" Width="24"
                                        Padding="{DynamicResource SmallFullMargin}" Focusable="False"
                                        Style="{DynamicResource MahApps.Styles.Button.Chromeless}">
                                    <Image Source="{DynamicResource Previous}" />
                                </Button>

                                <!--FindNext-->
                                <Button Margin="{DynamicResource SmallLeftMargin}"
                                        Command="editor:SearchCommands.FindNext"
                                        ToolTip="{x:Static resx:StudioResources.FindNext}" Height="24" Width="24"
                                        Padding="{DynamicResource SmallFullMargin}" Focusable="False"
                                        Style="{DynamicResource MahApps.Styles.Button.Chromeless}">
                                    <Image Source="{DynamicResource Next}" />
                                </Button>

                                <!--MatchCase-->
                                <ToggleButton Margin="{DynamicResource LargeLeftMargin}"
                                              Height="24" Width="24" Padding="{DynamicResource SmallFullMargin}"
                                              ToolTip="{x:Static resx:StudioResources.MatchCase}" Focusable="False"
                                              IsChecked="{Binding MatchCase, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{DynamicResource ChromelessToggleButtonStyle}">
                                    <Image Source="{DynamicResource CaseSensitive}" />
                                </ToggleButton>

                                <!--WholeWords-->
                                <ToggleButton Margin="{DynamicResource SmallLeftMargin}"
                                              Height="24" Width="24" Padding="{DynamicResource SmallFullMargin}"
                                              ToolTip="{x:Static resx:StudioResources.MatchWholeWord}" Focusable="False"
                                              IsChecked="{Binding WholeWords, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{DynamicResource ChromelessToggleButtonStyle}">
                                    <Image Source="{DynamicResource WholeWord}" />
                                </ToggleButton>

                                <!--UseRegex-->
                                <ToggleButton Margin="{DynamicResource SmallLeftMargin}"
                                              Height="24" Width="24" Padding="{DynamicResource SmallFullMargin}"
                                              ToolTip="{x:Static resx:StudioResources.UseRegularExpressions}" Focusable="False"
                                              IsChecked="{Binding UseRegex, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{DynamicResource ChromelessToggleButtonStyle}">
                                    <Image Source="{DynamicResource RegularExpression}" />
                                </ToggleButton>

                                <!-- CloseButton -->
                                <Button Margin="{DynamicResource LargeLeftMargin}"
                                        Command="editor:SearchCommands.CloseSearchPanel"
                                        ToolTip="{x:Static resx:StudioResources.Close}" Height="20" Width="20" Focusable="False"
                                        Padding="{DynamicResource SmallFullMargin}"
                                        HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                        HorizontalAlignment="Center" VerticalAlignment="Center"
                                        Style="{DynamicResource MahApps.Styles.Button.Chromeless}">
                                    <Path Fill="Red" Stretch="Uniform"
                                          Data="F1M54.0573,47.8776L38.1771,31.9974 54.0547,16.1198C55.7604,14.4141 55.7604,11.6511 54.0573,9.94531 52.3516,8.23962 49.5859,8.23962 47.8802,9.94531L32.0026,25.8229 16.1224,9.94531C14.4167,8.23962 11.6511,8.23962 9.94794,9.94531 8.24219,11.6511 8.24219,14.4141 9.94794,16.1198L25.8255,32 9.94794,47.8776C8.24219,49.5834 8.24219,52.3477 9.94794,54.0534 11.6511,55.7572 14.4167,55.7585 16.1224,54.0534L32.0026,38.1745 47.8802,54.0534C49.5859,55.7585 52.3516,55.7572 54.0573,54.0534 55.7604,52.3477 55.763,49.5834 54.0573,47.8776z" />
                                </Button>
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--SimpleSliderStyle-->
    <Style x:Key="SimpleSliderStyle" TargetType="{x:Type Slider}" BasedOn="{StaticResource MahApps.Styles.Slider}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Opacity" Value="0.8" />
        <Setter Property="metro:SliderHelper.ThumbFillBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="metro:SliderHelper.ThumbFillHoverBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="metro:SliderHelper.ThumbFillPressedBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="metro:SliderHelper.TrackFillBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="metro:SliderHelper.TrackFillHoverBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="metro:SliderHelper.TrackFillPressedBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="metro:SliderHelper.TrackValueFillBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="metro:SliderHelper.TrackValueFillHoverBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="metro:SliderHelper.TrackValueFillPressedBrush" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <!--DefaultButtonStyle-->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource Button.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Padding" Value="11, 2, 11, 2" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template" Value="{DynamicResource ButtonLightweightTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Backstage.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DefaultToggleButtonStyle-->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Background" Value="{DynamicResource Button.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Padding" Value="11, 2, 11, 2" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template" Value="{DynamicResource ButtonLightweightTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Backstage.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DefaultRepeatButtonStyle-->
    <Style BasedOn="{StaticResource {x:Type RepeatButton}}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource Button.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Padding" Value="11, 2, 11, 2" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template" Value="{DynamicResource ButtonLightweightTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Backstage.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DefaultCheckBoxStyle-->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{DynamicResource Editor.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0, 3, 0, 3" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="Root" Background="Transparent" Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="Field" Grid.Column="0" Grid.ColumnSpan="1" Height="14" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0, 1, 0, 1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="14">
                            <Border x:Name="IsDefault" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            <Border x:Name="IsFocused" BorderBrush="{DynamicResource Focused}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                            <Path x:Name="Indeterminate" Style="{DynamicResource CheckBoxIndeterminate}" Visibility="Collapsed" />
                            <Path x:Name="Checked" Style="{DynamicResource CheckBoxChecked}" Visibility="Collapsed" />
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Grid.ColumnSpan="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="4, 0, 0, 0" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Checked" Value="{DynamicResource HoverForeground}" />
                            <Setter Property="Fill" TargetName="Indeterminate" Value="{DynamicResource HoverForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{DynamicResource HoverBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{DynamicResource SelectionBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Checked" Value="{DynamicResource SelectionForeground}" />
                            <Setter Property="Fill" TargetName="Indeterminate" Value="{DynamicResource SelectionForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{DynamicResource SelectionBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{DynamicResource SelectionBorder}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Checked" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Indeterminate" Value="Visible" />
                        </Trigger>
                        <Trigger Property="FlowDirection" Value="RightToLeft">
                            <Setter Property="LayoutTransform" TargetName="Field">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="-1" ScaleY="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>