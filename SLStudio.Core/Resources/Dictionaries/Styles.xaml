<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:editor="http://icsharpcode.net/sharpdevelop/avalonedit"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:ae="http://icsharpcode.net/sharpdevelop/avalonedit"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:resx="clr-namespace:SLStudio.Core.Resources.Strings">
    <!--DefaultStyles-->
    <!--DefaultScrollBarStyle-->
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{DynamicResource Button.Background}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource Border}" BorderThickness="1, 0, 0, 0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="Row1" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                                <RowDefinition x:Name="Row2" Height="0.00001*" />
                                <RowDefinition x:Name="Row3" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                            </Grid.RowDefinitions>
                            <RepeatButton x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" Grid.Row="0" Style="{DynamicResource ScrollBarButtonStyle}">
                                <Rectangle Fill="{DXBinding '@a($RepeatButton).Foreground'}" Margin="4">
                                    <Rectangle.OpacityMask>
                                        <ImageBrush ImageSource="{DynamicResource ArrowUp}" Stretch="Uniform"/>
                                    </Rectangle.OpacityMask>
                                </Rectangle>
                            </RepeatButton>
                            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{DynamicResource VerticalScrollBarPageButtonStyle}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{DynamicResource VerticalScrollBarPageButtonStyle}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Margin="3, 0, 3, 0" Style="{DynamicResource ScrollBarThumb}" />
                                </Track.Thumb>
                            </Track>
                            <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" Grid.Row="2" Style="{DynamicResource ScrollBarButtonStyle}">
                                <Rectangle Fill="{DXBinding '@a($RepeatButton).Foreground'}" Margin="4">
                                    <Rectangle.OpacityMask>
                                        <ImageBrush ImageSource="{DynamicResource ArrowDown}" Stretch="Uniform"/>
                                    </Rectangle.OpacityMask>
                                </Rectangle>
                            </RepeatButton>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="17" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Background" Value="{DynamicResource Button.Background}" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="17" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource Border}" BorderThickness="0, 1, 0, 0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="Column1" MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                        <ColumnDefinition x:Name="Column2" Width="0.00001*" />
                                        <ColumnDefinition x:Name="Column3" MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" Grid.Column="0" Style="{DynamicResource ScrollBarButtonStyle}">
                                        <Rectangle Fill="{DXBinding '@a($RepeatButton).Foreground'}" Margin="4">
                                            <Rectangle.OpacityMask>
                                                <ImageBrush ImageSource="{DynamicResource ArrowLeft}" Stretch="Uniform"/>
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                    </RepeatButton>
                                    <Track x:Name="PART_Track" Grid.Column="1">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{DynamicResource HorizontalScrollBarPageButtonStyle}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{DynamicResource HorizontalScrollBarPageButtonStyle}" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Margin="0, 3, 0, 3" Style="{DynamicResource ScrollBarThumb}" />
                                        </Track.Thumb>
                                    </Track>
                                    <RepeatButton x:Name="PART_LineRightButton" Command="{x:Static ScrollBar.LineRightCommand}" Grid.Column="2" Style="{DynamicResource ScrollBarButtonStyle}">
                                        <Rectangle Fill="{DXBinding '@a($RepeatButton).Foreground'}" Margin="4">
                                            <Rectangle.OpacityMask>
                                                <ImageBrush ImageSource="{DynamicResource ArrowRight}" Stretch="Uniform"/>
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                    </RepeatButton>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DefaultButtonStyle-->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource Button.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Padding" Value="11, 2, 11, 2" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Template" Value="{DynamicResource ButtonLightweightTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Backstage.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DefaultToggleButtonStyle-->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Background" Value="{DynamicResource Button.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Padding" Value="11, 2, 11, 2" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Template" Value="{DynamicResource ButtonLightweightTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Backstage.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DefaultRepeatButtonStyle-->
    <Style BasedOn="{StaticResource {x:Type RepeatButton}}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource Button.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Padding" Value="11, 2, 11, 2" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Template" Value="{DynamicResource ButtonLightweightTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Backstage.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DefaultCheckBoxStyle-->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{DynamicResource Editor.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0, 3, 0, 3" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="Root" Background="Transparent" Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="Field" Grid.Column="0" Grid.ColumnSpan="1" Height="14" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0, 1, 0, 1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="14">
                            <Border x:Name="IsDefault" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            <Border x:Name="IsFocused" BorderBrush="{DynamicResource Focused}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                            <Path x:Name="Indeterminate" Style="{DynamicResource CheckBoxIndeterminate}" Visibility="Collapsed" />
                            <Path x:Name="Checked" Style="{DynamicResource CheckBoxChecked}" Visibility="Collapsed" />
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Grid.ColumnSpan="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="4, 0, 0, 0" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="IsFocused" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Checked" Value="{DynamicResource HoverForeground}" />
                            <Setter Property="Fill" TargetName="Indeterminate" Value="{DynamicResource HoverForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{DynamicResource HoverBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{DynamicResource SelectionBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Checked" Value="{DynamicResource SelectionForeground}" />
                            <Setter Property="Fill" TargetName="Indeterminate" Value="{DynamicResource SelectionForeground}" />
                            <Setter Property="Background" TargetName="IsDefault" Value="{DynamicResource SelectionBackground}" />
                            <Setter Property="BorderBrush" TargetName="IsDefault" Value="{DynamicResource SelectionBorder}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="IsFocused" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Root" Value="0.38" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Checked" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Indeterminate" Value="Visible" />
                        </Trigger>
                        <Trigger Property="FlowDirection" Value="RightToLeft">
                            <Setter Property="LayoutTransform" TargetName="Field">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="-1" ScaleY="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DefaultSeparatorStyle-->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="BorderBrush" Value="{DynamicResource Delimiter}"/>
        <Setter Property="BorderThickness" Value="0, 1, 0, 0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0, 2, 0, 2" />
        <Setter Property="MinHeight" Value="1" />
        <Setter Property="MinWidth" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" MinHeight="{TemplateBinding MinHeight}" MinWidth="{TemplateBinding MinWidth}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--DefaultToolTipStyle-->
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{DynamicResource Control.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="6, 4, 6, 4" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Sergoe UI" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" Margin="0, 0, 5, 5">
                            <Border.Effect>
                                <DropShadowEffect x:Name="Shadow" BlurRadius="4" Color="#00FFFFFF" Direction="315" Opacity="0.14" ShadowDepth="3"/>
                            </Border.Effect>
                        </Border>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0,0,5,5" Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" TextElement.FontFamily="{TemplateBinding FontFamily}" TextElement.FontSize="{TemplateBinding FontSize}" TextElement.FontStyle="{TemplateBinding FontStyle}" TextElement.FontWeight="{TemplateBinding FontWeight}" TextElement.Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--DefaultProgressBarStyle-->
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="{DynamicResource Editor.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource Focused}"/>
        <Setter Property="MinHeight" Value="5"/>
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="Root">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="PART_Track" Margin="1">
                                <Grid x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
                                    <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
                                    <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="-0.5, 0.5" Visibility="Collapsed">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="0.25" />
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                            </Grid>
                        </Border>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5, 0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5, 0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5, 0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="Root">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Animation" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
        
    <!--DefaultSliderStyle-->
    <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource MahApps.Styles.Slider}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource HoverBorder}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Opacity" Value="0.8" />
        <Setter Property="metro:SliderHelper.ThumbFillBrush" Value="{DynamicResource Backstage.Button.Background}" />
        <Setter Property="metro:SliderHelper.ThumbFillHoverBrush" Value="{DynamicResource Backstage.HoverBackground}" />
        <Setter Property="metro:SliderHelper.ThumbFillPressedBrush" Value="{DynamicResource Focused}" />
        <Setter Property="metro:SliderHelper.TrackFillBrush" Value="{DynamicResource Border}" />
        <Setter Property="metro:SliderHelper.TrackFillHoverBrush" Value="{DynamicResource HoverBorder}" />
        <Setter Property="metro:SliderHelper.TrackFillPressedBrush" Value="{DynamicResource HoverBorder}" />
        <Setter Property="metro:SliderHelper.TrackValueFillBrush" Value="{DynamicResource Backstage.Button.Background}" />
        <Setter Property="metro:SliderHelper.TrackValueFillHoverBrush" Value="{DynamicResource Backstage.HoverBackground}" />
        <Setter Property="metro:SliderHelper.TrackValueFillPressedBrush" Value="{DynamicResource Focused}" />
        <Setter Property="Foreground" Value="{DynamicResource Border}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <!--DefaultAvalonEditStyle-->
    <Style TargetType="{x:Type ae:TextEditor}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="SyntaxHighlighting" Value="XML" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="ShowLineNumbers" Value="True" />
        <Setter Property="LineNumbersForeground" Value="{DynamicResource Focused}" />
        <Setter Property="Background" Value="{DynamicResource Editor.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Style.Triggers>
            <DataTrigger Binding="{DXBinding '@s.IsKeyboardFocusWithin'}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Focused}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--DefaultAvalonEditSearchBoxStyle-->
    <Style TargetType="{x:Type editor:SearchPanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type editor:SearchPanel}">
                    <Border BorderThickness="1, 1, 1, 4"  Cursor="Arrow" Padding="6"
                            HorizontalAlignment="Right" VerticalAlignment="Top"
                            BorderBrush="{DynamicResource MahApps.Brushes.AccentBase}"
                            Background="{DynamicResource MahApps.Brushes.Window.Background}">
                        <!--Content-->
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!--SearchBox-->
                            <TextBox Name="PART_searchTextBox" Grid.Row="0"
                                     VerticalContentAlignment="Center"
                                     Width="200"
                                     metro:TextBoxHelper.Watermark="{x:Static resx:StudioResources.Search}"
                                     metro:TextBoxHelper.ButtonCommand="editor:SearchCommands.FindNext"
                                     BorderBrush="{DynamicResource MahApps.Brushes.Accent2}"
                                     metro:TextBoxHelper.SelectAllOnFocus="True">
                                <TextBox.Text>
                                    <Binding Path="SearchPattern"
                                             RelativeSource="{RelativeSource TemplatedParent}"
                                             UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ExceptionValidationRule />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MahApps.Styles.TextBox.Search}">
                                        <Setter Property="metro:ControlsHelper.FocusBorderBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
                                        <Setter Property="metro:ControlsHelper.MouseOverBorderBrush" Value="{DynamicResource MahApps.Brushes.Accent2}" />
                                    </Style>
                                </TextBox.Style>
                            </TextBox>

                            <StackPanel Grid.Row="1" HorizontalAlignment="Center"
                                        Orientation="Horizontal"
                                        Margin="{DynamicResource SmallUpMargin}">

                                <!-- FindPrevious-->
                                <Button Margin="{DynamicResource SmallLeftMargin}"
                                        Command="editor:SearchCommands.FindPrevious"
                                        ToolTip="{x:Static resx:StudioResources.FindPrevious}" Height="24" Width="24"
                                        Padding="{DynamicResource SmallFullMargin}" Focusable="False"
                                        Style="{DynamicResource MahApps.Styles.Button.Chromeless}">
                                    <Image Source="{DynamicResource Previous}" />
                                </Button>

                                <!--FindNext-->
                                <Button Margin="{DynamicResource SmallLeftMargin}"
                                        Command="editor:SearchCommands.FindNext"
                                        ToolTip="{x:Static resx:StudioResources.FindNext}" Height="24" Width="24"
                                        Padding="{DynamicResource SmallFullMargin}" Focusable="False"
                                        Style="{DynamicResource MahApps.Styles.Button.Chromeless}">
                                    <Image Source="{DynamicResource Next}" />
                                </Button>

                                <!--MatchCase-->
                                <ToggleButton Margin="{DynamicResource LargeLeftMargin}"
                                              Height="24" Width="24" Padding="{DynamicResource SmallFullMargin}"
                                              ToolTip="{x:Static resx:StudioResources.MatchCase}" Focusable="False"
                                              IsChecked="{Binding MatchCase, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{DynamicResource ChromelessToggleButtonStyle}">
                                    <Image Source="{DynamicResource CaseSensitive}" />
                                </ToggleButton>

                                <!--WholeWords-->
                                <ToggleButton Margin="{DynamicResource SmallLeftMargin}"
                                              Height="24" Width="24" Padding="{DynamicResource SmallFullMargin}"
                                              ToolTip="{x:Static resx:StudioResources.MatchWholeWord}" Focusable="False"
                                              IsChecked="{Binding WholeWords, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{DynamicResource ChromelessToggleButtonStyle}">
                                    <Image Source="{DynamicResource WholeWord}" />
                                </ToggleButton>

                                <!--UseRegex-->
                                <ToggleButton Margin="{DynamicResource SmallLeftMargin}"
                                              Height="24" Width="24" Padding="{DynamicResource SmallFullMargin}"
                                              ToolTip="{x:Static resx:StudioResources.UseRegularExpressions}" Focusable="False"
                                              IsChecked="{Binding UseRegex, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{DynamicResource ChromelessToggleButtonStyle}">
                                    <Image Source="{DynamicResource RegularExpression}" />
                                </ToggleButton>

                                <!-- CloseButton -->
                                <Button Margin="{DynamicResource LargeLeftMargin}"
                                        Command="editor:SearchCommands.CloseSearchPanel"
                                        ToolTip="{x:Static resx:StudioResources.Close}" Height="20" Width="20" Focusable="False"
                                        Padding="{DynamicResource SmallFullMargin}"
                                        HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                        HorizontalAlignment="Center" VerticalAlignment="Center"
                                        Style="{DynamicResource MahApps.Styles.Button.Chromeless}">
                                    <Path Fill="Red" Stretch="Uniform"
                                          Data="F1M54.0573,47.8776L38.1771,31.9974 54.0547,16.1198C55.7604,14.4141 55.7604,11.6511 54.0573,9.94531 52.3516,8.23962 49.5859,8.23962 47.8802,9.94531L32.0026,25.8229 16.1224,9.94531C14.4167,8.23962 11.6511,8.23962 9.94794,9.94531 8.24219,11.6511 8.24219,14.4141 9.94794,16.1198L25.8255,32 9.94794,47.8776C8.24219,49.5834 8.24219,52.3477 9.94794,54.0534 11.6511,55.7572 14.4167,55.7585 16.1224,54.0534L32.0026,38.1745 47.8802,54.0534C49.5859,55.7585 52.3516,55.7572 54.0573,54.0534 55.7604,52.3477 55.763,49.5834 54.0573,47.8776z" />
                                </Button>
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--WindowStyles-->
    <!--CleanWindowStyle-->
    <Style x:Key="CleanWindowStyle" TargetType="{x:Type metro:MetroWindow}">
        <Setter Property="WindowButtonCommands" Value="{DynamicResource DefaultWindowButtons}" />
        <Setter Property="IconTemplate" Value="{DynamicResource WindowIconTemplate}" />
        <Setter Property="WindowTitleBrush" Value="Transparent" />
        <Setter Property="NonActiveWindowTitleBrush" Value="Transparent" />
        <Setter Property="TitleForeground" Value="{DynamicResource Foreground}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Focused}" />
        <Setter Property="NonActiveBorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="GlowBrush" Value="{DynamicResource Focused}" />
        <Setter Property="NonActiveGlowBrush" Value="{DynamicResource Border}" />
        <Setter Property="SaveWindowPosition" Value="True" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="MinWidth" Value="800" />
        <Setter Property="MinHeight" Value="600" />
        <Setter Property="TitleAlignment" Value="Center" />
        <Setter Property="TitleCharacterCasing" Value="Normal" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <DataTrigger Binding="{DXBinding '@s.IsKeyboardFocusWithin'}" Value="False">
                <Setter Property="TitleForeground" Value="{DynamicResource Border}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--DialogWindowStyle-->
    <Style x:Key="DialogWindowStyle" TargetType="{x:Type metro:MetroWindow}">
        <Setter Property="WindowButtonCommands" Value="{DynamicResource DefaultWindowButtons}" />
        <Setter Property="IconTemplate" Value="{DynamicResource WindowIconTemplateLight}" />
        <Setter Property="WindowTitleBrush" Value="{DynamicResource Backstage.Window.Background}" />
        <Setter Property="NonActiveWindowTitleBrush" Value="{DynamicResource Backstage.Window.Background}" />
        <Setter Property="TitleForeground" Value="{DynamicResource Backstage.Foreground}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Focused}" />
        <Setter Property="NonActiveBorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="GlowBrush" Value="{DynamicResource Focused}" />
        <Setter Property="NonActiveGlowBrush" Value="{DynamicResource Border}" />
        <Setter Property="SaveWindowPosition" Value="False" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="MinWidth" Value="300" />
        <Setter Property="MinHeight" Value="300" />
        <Setter Property="TitleAlignment" Value="Left" />
        <Setter Property="TitleCharacterCasing" Value="Normal" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <DataTrigger Binding="{DXBinding '@s.IsKeyboardFocusWithin'}" Value="False">
                <Setter Property="TitleForeground" Value="{DynamicResource Backstage.Foreground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--WindowButtonsStyle-->
    <Style x:Key="WindowButtonsStyle" TargetType="{x:Type metro:WindowButtonCommands}"
           BasedOn="{StaticResource MahApps.Styles.WindowButtonCommands.Win10}">
        <Setter Property="Template" Value="{DynamicResource MahApps.Templates.WindowButtonCommands.Win10}" />
        <Setter Property="LightMinButtonStyle" Value="{DynamicResource WindowButtonsLigthStyle}" />
        <Setter Property="LightMaxButtonStyle" Value="{DynamicResource WindowButtonsLigthStyle}" />
        <Setter Property="LightCloseButtonStyle" Value="{DynamicResource WindowButtonsLigthStyle}" />
        <Setter Property="DarkMinButtonStyle" Value="{DynamicResource WindowButtonsDarkStyle}" />
        <Setter Property="DarkMaxButtonStyle" Value="{DynamicResource WindowButtonsDarkStyle}" />
        <Setter Property="DarkCloseButtonStyle" Value="{DynamicResource WindowButtonsDarkStyle}" />
    </Style>

    <!--WindowButtonsLigthStyle-->
    <Style x:Key="WindowButtonsLigthStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MahApps.Styles.Button.MetroWindow.Light}">
        <Setter Property="Foreground" Value="{DXBinding '@a($metro:MetroWindow).TitleForeground'}" />
    </Style>

    <!--WindowButtonsDarkStyle-->
    <Style x:Key="WindowButtonsDarkStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MahApps.Styles.Button.MetroWindow.Dark}">
        <Setter Property="Foreground" Value="{DXBinding '@a($metro:MetroWindow).TitleForeground'}" />
    </Style>

    <!--ButtonStyles-->
    <!--HorizontalScrollBarPageButtonStyle-->
    <Style x:Key="HorizontalScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle x:Name="IsDefault" Fill="Transparent" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="IsDefault" Value="{DynamicResource HoverBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--VerticalScrollBarPageButtonStyle-->
    <Style x:Key="VerticalScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle x:Name="IsDefault" Fill="Transparent" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="IsDefault" Value="{DynamicResource HoverBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollBarButtonStyle-->
    <Style x:Key="ScrollBarButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="IsDefault" Background="Transparent" x:Uid="@Background=Button.Background">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="1.0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="1.0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Focused}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--ScrollBarThumb-->
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="MinHeight" Value="6" />
        <Setter Property="MinWidth" Value="6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="IsDefault" Fill="{DynamicResource Foreground}"
                               MinHeight="{TemplateBinding MinHeight}" MinWidth="{TemplateBinding MinWidth}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.4"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.7"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="IsDefault" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>