<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:converters="http://metro.mahapps.com/winfx/xaml/shared"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <converters:CornerRadiusBindingConverter x:Key="CornerRadiusBindingConverter" />

    <!--StudioErrorValidationTemplate-->
    <ControlTemplate x:Key="StudioErrorValidationTemplate">
        <AdornedElementPlaceholder x:Name="placeholder">
            <Grid SnapsToDevicePixels="True">
                <Rectangle x:Name="PopupTargetElement"
                           Margin="-5, 0" StrokeThickness="0"
                           DataContext="{Binding ElementName=placeholder}" />
                <Border x:Name="ValidationErrorElement"
                        DataContext="{Binding ElementName=placeholder}"
                        BorderBrush="{StaticResource MahApps.Brushes.Control.Validation}"
                        BorderThickness="{Binding ElementName=placeholder, Path=AdornedElement.BorderThickness, FallbackValue=1, TargetNullValue=1}"
                        CornerRadius="{Binding ElementName=placeholder, Path=(metro:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static converters:RadiusType.TopRight}}"

                        SnapsToDevicePixels="{Binding ElementName=placeholder, Path=AdornedElement.SnapsToDevicePixels, FallbackValue=True, TargetNullValue=True}">

                    <Grid x:Name="RedTriangle"
                          Margin="1, -4, -4, 0"
                          Width="12" Height="12"
                          HorizontalAlignment="Right"
                          VerticalAlignment="Top"
                          Background="Transparent">
                        <Path Margin="1 3 0 0" Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z"
                              Fill="{StaticResource MahApps.Brushes.Validation5}" />

                        <Path Margin="1 3 0 0" Data="M 0,0 L2,0 L 8,6 L8,8"
                              Fill="{StaticResource MahApps.Brushes.ThemeBackground}" />
                    </Grid>
                </Border>

                <metro:CustomValidationPopup x:Name="ValidationPopup"
                                             AllowsTransparency="True" IsOpen="False"
                                             AdornedElement="{Binding ElementName=placeholder, Path=AdornedElement, Mode=OneWay}"
                                             PlacementTarget="{Binding ElementName=PopupTargetElement, Mode=OneWay}">
                    <Grid x:Name="Root" Margin="4">
                        <Grid.Resources>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=Root, Path=IsMouseOver, Mode=OneWay}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.15" Duration="0:0:0.1" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>

                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>

                        <Border Margin="4, 4, -4, -4"
                                CornerRadius="5"
                                Background="{StaticResource MahApps.Brushes.Validation1}" />

                        <Border Margin="3, 3, -3, -3"
                                CornerRadius="4"
                                Background="{StaticResource MahApps.Brushes.Validation2}" />

                        <Border Margin="2, 2, -2, -2"
                                CornerRadius="3"
                                Background="{StaticResource MahApps.Brushes.Validation3}" />

                        <Border Margin="1, 1, -1, -1"
                                CornerRadius="2"
                                Background="{StaticResource MahApps.Brushes.Validation4}" />

                        <Border CornerRadius="2" Background="{StaticResource MahApps.Brushes.Validation5}">
                            <Border.Resources>
                                <DataTemplate DataType="{x:Type ValidationError}">
                                    <TextBlock Margin="8, 4, 8, 4" MaxWidth="250"
                                               TextWrapping="Wrap"
                                               UseLayoutRounding="False"
                                               Text="{Binding ErrorContent}"
                                               Foreground="{StaticResource MahApps.Brushes.Text.Validation}" />
                                </DataTemplate>
                            </Border.Resources>

                            <ItemsControl ItemsSource="{Binding}" />
                        </Border>
                    </Grid>
                </metro:CustomValidationPopup>
            </Grid>
        </AdornedElementPlaceholder>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=placeholder, Path=AdornedElement.BorderThickness, FallbackValue=0, TargetNullValue=0}" Value="0">
                <Setter TargetName="ValidationErrorElement" Property="BorderThickness" Value="1" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=ValidationPopup, Path=CanShow, Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=RedTriangle, Path=IsMouseOver, Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.(metro:ValidationHelper.ShowValidationErrorOnMouseOver), Mode=OneWay}" Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=RedTriangle, Path=IsMouseOver, Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=ValidationPopup, Path=ShowValidationErrorOnMouseOver, Mode=OneWay}" Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>